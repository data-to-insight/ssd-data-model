/*
=============================================================================
Object Name: ssd_person
Description: Person/child details. 
Author: Lee Hallsworth - City of Wolverhampton Council
Version: 0.1 Creation - LH - <date>
Status: Dev
Remarks:    

Dependencies:

=============================================================================
*/

WITH EXCLUSIONS AS (
	SELECT
		PV.PERSONID
	FROM PERSONVIEW PV
	WHERE PV.PERSONID IN (
			1,2,3,4,5,6,99046,100824,100825,100826,100827,100828,100829,100830,100832,100856,100857,100861,100864,9999040,102790,
			100831,100833,100834,100838,100839,100859,100860,99524,99543,99555,99559,99613,99661,99662,99993,100276,100290,100372,109032,100924,
			100941,35698,43088,68635,74902,77731,97447,9999000,9999010,9999025,9999026,9999029,9999050,72306,109032,117746,
			97951 --not flagged as duplicate
		)
		OR COALESCE(PV.DUPLICATED,'?') IN ('DUPLICATE')
		OR UPPER(PV.FORENAME) LIKE '%DUPLICATE%'
		OR UPPER(PV.SURNAME) LIKE '%DUPLICATE%'
)

SELECT DISTINCT
	P.PERSONID               AS "pers_person_id", --metadata={"item_ref:"PERS001A"}
	P.SURNAME                AS "pers_surname" -- metadata={"item_ref":"PERS016A"}    
	P.FORENAME               AS "pers_forename",  -- metadata={"item_ref":"PERS015A"}  
	CASE
		WHEN P.SEX = 'Male'
			THEN 'M'
		WHEN P.SEX = 'Female'
			THEN 'F'
		ELSE 'U'
	END                      AS "pers_sex", --metadata={"item_ref:"PERS002A"}
	CASE
		WHEN P.GENDER = 'Man'
			THEN '01'
		WHEN P.GENDER = 'Woman'
			THEN '02'
		WHEN P.GENDER IS NULL
			THEN '00'
		ELSE '09'
	END                      AS "pers_gender", --metadata={"item_ref:"PERS003A"}
	CASE
		WHEN P.ETHNICITYCODE = 'ARAB' THEN '??'
		WHEN P.ETHNICITYCODE = 'BANGLADESHI' THEN 'ABAN'
		WHEN P.ETHNICITYCODE = 'INDIAN' THEN 'AIND'
		WHEN P.ETHNICITYCODE = 'OTHER_ASIAN' THEN 'AOTH'
		WHEN P.ETHNICITYCODE = 'ENG_SCOT_TRAVELLER' THEN 'AOTH'
		WHEN P.ETHNICITYCODE = 'PAKISTANI' THEN 'APKN'
		WHEN P.ETHNICITYCODE = 'AFRICAN' THEN 'BAFR'
		WHEN P.ETHNICITYCODE = 'BLACK_AFRICAN' THEN 'BAFR'
		WHEN P.ETHNICITYCODE = 'BLACK_CARIBBEAN' THEN 'BCRB'
		WHEN P.ETHNICITYCODE = 'CARIBBEAN' THEN 'BCRB'
		WHEN P.ETHNICITYCODE = 'OTHER_BLACK' THEN 'BOTH'
		WHEN P.ETHNICITYCODE = 'OTHER_AFRICAN' THEN 'BOTH'
		WHEN P.ETHNICITYCODE = 'CHINESE' THEN 'CNHE'
		WHEN P.ETHNICITYCODE = 'OTHER_MIXED' THEN 'MOTH'
		WHEN P.ETHNICITYCODE = 'WHITE_AND_ASIAN' THEN 'MWAS'
		WHEN P.ETHNICITYCODE = 'WHITE_AND_BLACK_AFRICAN' THEN 'MWBa'
		WHEN P.ETHNICITYCODE = 'WHITE_AND_BLACK_CARIBBEAN' THEN 'MWBC'
		WHEN P.ETHNICITYCODE = 'NOT_KNOWN' THEN 'NOBT'
		WHEN P.ETHNICITYCODE = 'OTHER_ETHNIC' THEN 'OOTH'
		WHEN P.ETHNICITYCODE = 'REFUSED' THEN 'REFU'
		WHEN P.ETHNICITYCODE = 'WHITE_BRITISH' THEN 'WBRI'
		WHEN P.ETHNICITYCODE = 'WHITE_NORTHERNIRISH' THEN 'WBRI'
		WHEN P.ETHNICITYCODE = 'WHITE_SCOTTISH' THEN 'WBRI'
		WHEN P.ETHNICITYCODE = 'WHITE_WELSH' THEN 'WBRI'
		WHEN P.ETHNICITYCODE = 'WHITE_IRISH' THEN 'WIRI'
		WHEN P.ETHNICITYCODE = 'IRISHTRAVELLER' THEN 'WIRT'
		WHEN P.ETHNICITYCODE = 'OTHER_WHITE_ORIGIN' THEN 'WOTH'
		WHEN P.ETHNICITYCODE = 'WHITE_POLISH' THEN 'WOTH'
		WHEN P.ETHNICITYCODE = 'GYPSY' THEN 'WROM'
		WHEN P.ETHNICITYCODE = 'TRAVELLER' THEN 'WROM'
		WHEN P.ETHNICITYCODE = 'ROMA' THEN 'WROM'
		WHEN P.ETHNICITYCODE IS NULL THEN 'NOBT'
		ELSE '??'
	END                        AS "pers_ethnicity", --metadata={"item_ref:"PERS004A"}
	COALESCE(P.DATEOFBIRTH,
		CASE
			WHEN P.DATEOFBIRTH IS NULL AND P.DUEDATE >= CURRENT_TIMESTAMP
			 	THEN P.DUEDATE
		END
	)                          AS "pers_dob", --metadata={"item_ref:"PERS005A"}
	P.NHSNUMBER "pers_common_child_id", --metadata={"item_ref:"PERS013A"}
	P.CAREFIRSTID "pers_legacy_id", --metadata={"item_ref:"PERS014A"}
	COALESCE(UPN.UPN,UN_UPN.UN_UPN,
			--factor in those under 5
			CASE
				WHEN EXTRACT(YEAR FROM AGE(COALESCE(P.DIEDDATE,CURRENT_TIMESTAMP),P.DATEOFBIRTH)) < 5
					THEN 'UN1'
				--new in care (1 week prior to collection period end)
			 	--NEEDS BUILDING IN
				--WHEN EOC.POCSTARTDATE + interval '1 week' >= C.SUBMISSION_TO
				-- 	THEN 'UN4'
				--when UASC
				WHEN UASC.PERSONID IS NOT NULL
				 	THEN 'UN2'
			END
	)                          AS "pers_upn_unknown", --metadata={"item_ref:"PERS007A"}
	/*Flag showing if a person has an EHC plan recorded on the system. 
	Code set 
	Y - Has an EHC Plan 
	N - Does not have an EHC Plan  */
	NULL                       AS "pers_send_flag", --metadata={"item_ref:"PERS008A"}
	CASE
		WHEN P.DUEDATE >= CURRENT_TIMESTAMP
			THEN P.DUEDATE
	END                        AS "pers_expected_dob", --metadata={"item_ref:"PERS009A"}
	P.DIEDDATE "pers_death_date", --metadata={"item_ref:"PERS010A"}
	CASE
		WHEN MOTHER.PERSONID IS NOT NULL
			THEN 'Y'
		ELSE 'N'
	END                        AS "pers_is_mother", --metadata={"item_ref:"PERS011A"}
	/*Required for UASC, reported in the ADCS Safeguarding Pressures research. */
	P.COUNTRYOFBIRTHCODE       AS "pers_nationality" --metadata={"item_ref:"PERS012A"}
FROM PERSONDEMOGRAPHICSVIEW P
LEFT JOIN (
	SELECT DISTINCT
		RNPV.PERSONID,
		RNPV.REFERENCENUMBER UPN,
		--open on the system first, then followed by the most recent
		ROW_NUMBER() OVER(PARTITION BY PERSONID ORDER BY COALESCE(RNPV.ENDDATE,CURRENT_TIMESTAMP) DESC, STARTDATE DESC) RN
	FROM REFERENCENUMBERPERSONVIEW RNPV
	WHERE RNPV.REFERENCETYPECODE = 'UPN'
) UPN ON P.PERSONID = UPN.PERSONID --derived table is around 5 seconds
	AND UPN.RN = 1
LEFT JOIN (
	SELECT DISTINCT
		A.PERSONID,
		STRING_AGG(CLASSIFICATION_CODE,', ') UN_UPN
	FROM (
		SELECT DISTINCT
			PCA.PERSON_FK PERSONID,
			--CONCAT(CG.NAME,'/',CLA.NAME) CLASSIFICATION,
			CLA.CODE CLASSIFICATION_CODE,
			--This needs major reconciliations into the front end to ensure accuracy - not convinced currently
			CAST(CLA_ASSIGN.START_DATE AS DATE) START_DATE,
			CAST(CLA_ASSIGN.END_DATE AS DATE) END_DATE,
			--open on the system first, then followed by the most recent, use dense rank here because concerns over DQ
			DENSE_RANK() OVER(PARTITION BY PCA.PERSON_FK ORDER BY COALESCE(CLA_ASSIGN.END_DATE,CURRENT_TIMESTAMP) DESC, CLA_ASSIGN.START_DATE DESC) RN
		FROM CLASSIFICATION CLA
		INNER JOIN CLASSIFICATION_GROUP CG ON CLA.CLASSIFICATION_GROUP_FK = CG.ID
		INNER JOIN CLASSIFICATION_ASSIGNMENT CLA_ASSIGN ON CLA.ID = CLA_ASSIGN.CLASSIFICATION_FK
			AND COALESCE(CLA_ASSIGN.STATUS,'?') NOT IN ('DELETED')
		INNER JOIN SUBJECT_CLASSIFICATION_ASSIGNM CLA_SUBJ ON CLA_ASSIGN.SUBJECT_CLASSIFICATION_ASSI_FK = CLA_SUBJ.ID
		INNER JOIN PERSON_CLASSIFICATION_ASSIGNME PCA ON PCA.ID = CLA_SUBJ.ID
		WHERE CG.ID = 2
			--based on the guidance only want those which are UN1-5, some instances where they were UN6+, remove these.
			AND CLA.CODE IN ('UN1','UN2','UN3','UN4','UN5')
	) A
	WHERE A.RN = 1
	GROUP BY A.PERSONID
) UN_UPN ON P.PERSONID = UN_UPN.PERSONID --derived table is around 5 seconds
LEFT JOIN (
	SELECT DISTINCT
		PCA.PERSON_FK PERSONID,
		CONCAT(CG.NAME,'/',CLA.NAME) CLASSIFICATION,
		CAST(CLA_ASSIGN.START_DATE AS DATE) START_DATE,
		CAST(CLA_ASSIGN.END_DATE AS DATE) END_DATE,
		ROW_NUMBER() OVER(PARTITION BY PCA.PERSON_FK ORDER BY CAST(CLA_ASSIGN.START_DATE AS DATE) DESC) RN
	FROM CLASSIFICATION CLA
	INNER JOIN CLASSIFICATION_GROUP CG ON CLA.CLASSIFICATION_GROUP_FK = CG.ID
	INNER JOIN CLASSIFICATION_ASSIGNMENT CLA_ASSIGN ON CLA.ID = CLA_ASSIGN.CLASSIFICATION_FK
		AND COALESCE(CLA_ASSIGN.STATUS,'?') NOT IN ('DELETED')
	INNER JOIN SUBJECT_CLASSIFICATION_ASSIGNM CLA_SUBJ ON CLA_ASSIGN.SUBJECT_CLASSIFICATION_ASSI_FK = CLA_SUBJ.ID
	INNER JOIN PERSON_CLASSIFICATION_ASSIGNME PCA ON PCA.ID = CLA_SUBJ.ID
	WHERE UPPER(CG.CODE) = 'ASY_STAT'
		--unacc only!
		AND CLA.ID = 423
) UASC ON P.PERSONID = UASC.PERSONID --about 2 seconds for the derived table
	AND UASC.RN = 1
	AND COALESCE(UASC.END_DATE,CURRENT_TIMESTAMP) >= CURRENT_TIMESTAMP
	AND UASC.START_DATE <= CURRENT_TIMESTAMP
LEFT JOIN (
	SELECT DISTINCT
		PV2.PERSONID,
		PV2.CAREFIRSTID,
		PV2.DATEOFBIRTH,
		EXTRACT(YEAR FROM AGE(CURRENT_DATE,PV2.DATEOFBIRTH)) AGE_ON_SNAPSHOT,
		EXTRACT(YEAR FROM AGE(PV.DATEOFBIRTH,PV2.DATEOFBIRTH)) AGE_AT_CHILD_BIRTH,
		PV2.FORENAME,
		PV2.SURNAME,
		PV.PERSONID CHILD_PERSONID,
		CONCAT(PV.FORENAME,' ',PV.SURNAME) CHILD_NAME,
		PV.DATEOFBIRTH CHILD_DOB,
		PPR.START_DATE RELATIONSHIP_START_DATE,
		PPR.CLOSE_DATE RELATIONSHIP_END_DATE,
		CASE
			WHEN CURRENT_DATE BETWEEN PPR.START_DATE AND COALESCE(PPR.CLOSE_DATE,CURRENT_DATE)
				THEN 'Y'
			ELSE 'N'
		END ACTIVE_RELATIONSHIP,
		RT.ID RELATIONSHIP_TYPE_ID,
		RT.RELATIONSHIP_CLASS,
		RT.RELATIONSHIP_CLASS_NAME
	FROM PERSONDEMOGRAPHICSVIEW PV
	INNER JOIN PERSON_PER_RELATIONSHIP PPR ON (PV.PERSONID = PPR.ROLE_A_PERSON_FK OR PV.PERSONID = PPR.ROLE_B_PERSON_FK)
	INNER JOIN PERSONVIEW PV2 ON (PPR.ROLE_B_PERSON_FK = PV2.PERSONID OR PPR.ROLE_A_PERSON_FK = PV2.PERSONID)
	INNER JOIN RELATIONSHIP_TYPE RT ON PPR.PERSON_PER_REL_TYPE_FK  = RT.ID
		AND RT.ID IN (17)
	WHERE PV.PERSONID <> COALESCE(PV2.PERSONID,000000)
		AND COALESCE(PV.DATEOFBIRTH,CURRENT_DATE) >= PV2.DATEOFBIRTH
		AND PV2.GENDER = 'Female'
) MOTHER ON P.PERSONID = MOTHER.PERSONID
WHERE P.PERSONID NOT IN (SELECT E.PERSONID FROM EXCLUSIONS E)
--Limit this down to the SSD Cohort.
/*
WHERE EXISTS (
	--CIN
	


)
*/